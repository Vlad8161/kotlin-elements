package com.tschuchort.kotlinelements

import javax.lang.model.AnnotatedConstruct
import javax.lang.model.element.*
import javax.lang.model.type.TypeMirror
import javax.lang.model.util.Elements

/**
 * A static Kotlin- or Java-language level construct that originates from Kotlin source code.
 *
 * That means either an element representing a syntactic construct in Kotlin source code
 * ([KotlinElement]) or a Java [Element] that was generated by the Kotlin compiler but is
 * not accessible from Kotlin code and has no 1:1 correspondence to a syntactic
 * construct in Kotlin code ([KotlinCompatElement])
 */
sealed class KotlinRelatedElement

/**
 * A Java [Element] that was generated by the Kotlin compiler for
 * Java compatibility or implementation purposes and has no 1:1 correspondence
 * to a syntactic construct in Kotlin source code and is not accessible from
 * Kotlin source code except through annotation use-site targets (in contrast
 * to generated elements like default constructors that are accessible from
 * Kotlin source code)
 *
 * Since the element itself never appears explicitly in Kotlin source code, it is
 * not considered a [KotlinElement]
 *
 * Those elements are not necessarily [Elements.Origin.MANDATED] because they
 * are sometimes generated by explicit annotations like @[JvmOverloads]
 */
abstract class KotlinCompatElement(
		override val javaElement: Element
) : KotlinRelatedElement(), Has1To1JavaMapping, AnnotatedConstruct by javaElement {

	abstract val enclosingElement: KotlinRelatedElement

	final override fun toString(): String = javaElement.toString()
	final override fun equals(other: Any?): Boolean = (javaElement == other)
	final override fun hashCode(): Int = javaElement.hashCode()
}

/** Unspecified [KotlinCompatElement] */
class UnspecifiedKotlinCompatElement(
		javaElement: Element,
		override val enclosingElement: KotlinRelatedElement
) : KotlinCompatElement(javaElement)

/**
 * Represents a syntax element such as a class, method, typealias, and so on
 * in the Kotlin source code.
 *
 * This includes compiler generated elements that are directly accessible
 * from Kotlin code but not those that are generated by the Kotlin compiler
 * for Java-compatibility or implementation purposes such as java overloads of a method,
 * backing fields, file facade classes, interface default implementations and so on
 *
 * Not every [KotlinElement] is necessarily backed by at least one Java [Element]
 * (type aliases in particular) and not every [KotlinElement] that corresponds
 * to only a single Java [Element] (for example: methods with @[JvmOverloads] annotation)
 */
sealed class KotlinElement: KotlinRelatedElement(), AnnotatedConstruct {
	abstract val enclosingElement: KotlinElement?

	abstract val simpleName: Name

	abstract fun asType(): TypeMirror

	//TODO("visitor API")

	abstract override fun toString(): String
	abstract override fun equals(other: Any?): Boolean
	abstract override fun hashCode(): Int
}

/** An element that declares a new type like a class, object, interface or annotation class */
sealed class KotlinTypeElement : KotlinElement(), KotlinParameterizable,
	KotlinQualifiedNameable, HasKotlinVisibility, HasKotlinModality,
	HasKotlinMultiPlatformImplementations, HasKotlinExternalImplementation, Has1To1JavaMapping {

	abstract override val javaElement: TypeElement

	/** Whether this type is an inner type */
	abstract val isInner: Boolean

	/** The interfaces implemented by this type */
	abstract val interfaces: List<TypeMirror>

	/** The superclass extended by this type */
	abstract val superclass: TypeMirror
}

abstract class KotlinClassElement : KotlinTypeElement(), EnclosesKotlinConstructors,
	EnclosesKotlinFunctions, EnclosesKotlinProperties, EnclosesKotlinTypes, HasKotlinCompanion {

	/** Whether this class is a data class */
	abstract val isDataClass: Boolean

	@Suppress("UNCHECKED_CAST")
	override val enclosedKotlinElements: Set<KotlinElement>
		get() = (functions + properties + kotlinTypes + constructors + listOfNotNull(companion))
				as Set<KotlinElement>
}

abstract class KotlinInterfaceElement : KotlinTypeElement(),
	EnclosesKotlinFunctions, EnclosesKotlinProperties, EnclosesKotlinTypes, HasKotlinCompanion {

	@Suppress("UNCHECKED_CAST")
	override val enclosedKotlinElements: Set<KotlinElement>
		get() = (functions + properties + kotlinTypes + listOfNotNull(companion)) as Set<KotlinElement>
}

abstract class KotlinObjectElement : KotlinTypeElement(), EnclosesKotlinTypes,
	EnclosesKotlinProperties, EnclosesKotlinFunctions {

	/** Whether this object is a companion object */
	abstract val isCompanion: Boolean

	@Suppress("UNCHECKED_CAST")
	override val enclosedKotlinElements: Set<KotlinElement>
		get() = (functions + properties + kotlinTypes) as Set<KotlinElement>
}


/** A declaration of an annotation class */
abstract class KotlinAnnotationElement : KotlinTypeElement() {
	/** The parameters of the annotation */
	abstract val parameters: List<KotlinAnnotationParameterElement>
}

/** A parameter of an annotation class */
abstract class KotlinAnnotationParameterElement : KotlinElement(), Has1To1JavaMapping {

	abstract override val javaElement: ExecutableElement

	/**
	 * The default value of this annotation parameter or
	 * [null] if it doesn't have one
	 */
	abstract val defaultValue: Any?

	/**
	 * An annotation parameter is enclosed by its annotation class
	 */
	abstract override val enclosingElement: KotlinAnnotationElement
}

/** A declaration of an enum class */
abstract class KotlinEnumElement : KotlinTypeElement(), EnclosesKotlinConstructors,
	EnclosesKotlinFunctions, EnclosesKotlinProperties, EnclosesKotlinTypes, HasKotlinCompanion {

	/** The enum constants defined by this enum declaration */
	abstract val enumConstants: List<KotlinEnumConstantElement>

	@Suppress("UNCHECKED_CAST")
	override val enclosedKotlinElements: Set<KotlinElement>
		get() = (functions + properties + kotlinTypes + constructors + listOfNotNull(companion))
				as Set<KotlinElement>
}

/** A declaration of an enum constant */
abstract class KotlinEnumConstantElement : KotlinElement(), Has1To1JavaMapping

/**
 *  A [KotlinExecutableElement] corresponds to a single method, free function or constructor
 *  in Kotlin source code, but may correspond to several Java [ExecutableElement]s that are
 *  generated when @[JvmOverloads] is used
 */
abstract class KotlinExecutableElement : KotlinElement(), Has1To1JavaMapping {

	/**
	 * the Java method associated with this Kotlin method or the one that
	 * has the same signature (all parameters) if there are multiple associated
	 * Java elements generated by @[JvmOverloads]
	 */
	abstract override val javaElement: ExecutableElement

	/**
	 * Java method elements that were generated by @[JvmOverloads] and have
	 * less parameters than the Kotlin method
	 */
	abstract val javaOverloads: List<JavaOverload>

	/**
	 * Returns {@code true} if this method or constructor accepts a variable
	 * number of arguments and returns {@code false} otherwise.
	 *
	 * @return {@code true} if this method or constructor accepts a variable
	 * number of arguments and {@code false} otherwise
	 */
	abstract val isVarArgs: Boolean

	/**
	 * The formal parameters of this executable.
	 * They are returned in declaration order.
	 *
	 * @return the formal parameters,
	 * or an empty list if there are none
	 */
	abstract val parameters: List<KotlinParameterElement>

	abstract val receiverType: TypeMirror?

	abstract val thrownTypes: List<TypeMirror>

	abstract val returnType: TypeMirror

	abstract override val enclosingElement: KotlinElement

	/** Java overload of a Kotlin function with default parameters and [JvmOverloads] annotation */
	inner class JavaOverload(override val javaElement: ExecutableElement)
		: KotlinCompatElement(javaElement) {

		/** A [JavaOverload] is enclosed by its corresponding non-overloaded Kotlin function */
		override val enclosingElement: KotlinExecutableElement = this@KotlinExecutableElement
	}
}

/** A declaration of a Kotlin method or free function */
abstract class KotlinFunctionElement : KotlinExecutableElement(),
	KotlinParameterizable, HasKotlinModality, HasKotlinVisibility,
	HasKotlinMultiPlatformImplementations, HasKotlinExternalImplementation {

	abstract val isInline: Boolean
	abstract val isInfix: Boolean
	abstract val isTailRec: Boolean
	abstract val isSuspend: Boolean
	abstract val isOperator: Boolean

	//TODO("is free function")
	//TODO("is extension function")
}

abstract class KotlinConstructorElement : KotlinExecutableElement(), HasKotlinVisibility {
	/** Whether this constructor is the primary constructor of its class */
	abstract val isPrimary: Boolean

	abstract override val enclosingElement: KotlinTypeElement
}

abstract class KotlinParameterElement : KotlinElement(), Has1To1JavaMapping {
	abstract override val javaElement: VariableElement

	/**
	 * Whether this parameter has a default value
	 *
	 * Not to be confused with [javax.lang.model.element.ExecutableElement.isDefault]
	 * and [javax.lang.model.element.ExecutableElement.getDefaultValue] which
	 * merely returns the default value of an annotation class parameter
	 */
	abstract val hasDefaultValue: Boolean

	/** Whether this parameter has the `crossinline` modifier */
	abstract val isCrossInline: Boolean

	/** Whether this parameter has the `noinline` modifier */
	abstract val isNoInline: Boolean
}

/** A Kotlin property declaration */
abstract class KotlinPropertyElement : KotlinElement(),
	HasKotlinExternalImplementation, HasKotlinMultiPlatformImplementations {
	/**
	 * If the Kotlin property has annotations with target [AnnotationTarget.PROPERTY]
	 * the Kotlin compiler will generate an empty parameterless void-returning
	 * synthetic method named "propertyName$annotations" to hold the annotations that
	 * are targeted at the property and not backing field, getter or setter
	 */
	abstract val javaAnnotationHolderElement: ExecutableElement?

	/** The backing field of this property, if it has one */
	abstract val backingField: KotlinPropertyElementImpl.BackingField?

	/** The setter of this property, if it has one */
	abstract val setter: KotlinSetterElement?

	/** The getter of this property, if it has one */
	abstract val getter: KotlinGetterElement?

	/**
	 * If the Kotlin property is delegated a field is generated to hold
	 * the instance of the delegate class
	 */
	abstract val delegateField: KotlinPropertyElementImpl.DelegateField?

	/**
	 * Returns the value of this property if this is a `const`
	 * property initialized to a compile-time constant.  Returns
	 * `null` otherwise.  The value will be of a primitive type or a
	 * [String].
	 *
	 * Enum constants are not considered to be compile-time constants.
	 */
	abstract val constantValue: Any?

	/** Whether this property is delegated */
	abstract val isDelegated: Boolean

	/** Whether this property is late-initialized */
	abstract val isLateInit: Boolean

	/** whether this property is read-only */
	abstract val isReadOnly: Boolean

	/** The receiver type of this property if it is not a free property */
	abstract val receiverType: TypeMirror?

	/** A [BackingField] is hidden field generated for a Kotlin property */
	inner class BackingField(override val javaElement: VariableElement)
		: KotlinCompatElement(javaElement) {

		/** A backing field is enclosed by its property */
		override val enclosingElement: KotlinPropertyElement = this@KotlinPropertyElement
	}

	/**
	 * A [DelegateField] is a hidden field generated for a Kotlin property to hold the reference
	 * to the delegate instance
	 */
	inner class DelegateField(override val javaElement: VariableElement)
		: KotlinCompatElement(javaElement) {

		/** A delegate field is enclosed by its property */
		override val enclosingElement: KotlinPropertyElement = this@KotlinPropertyElement
	}
}

/** The accessor (getter or setter) of a property */
sealed class KotlinAccessorElement : KotlinExecutableElement(), HasKotlinVisibility,
	HasKotlinModality, HasKotlinExternalImplementation {

	/** Whether this accessor is the default implementation and not a custom getter/setter written by programmer */
	abstract val isDefaultImplementation: Boolean

	/** Whether this accessor is inline */
	abstract val isInline: Boolean

	/** A property accessor never has java overloads  */
	final override val javaOverloads: List<Nothing> = emptyList()

	/** An accessor is enclosed by its property */
	abstract override val enclosingElement: KotlinPropertyElement
}

/** Getter element of a Kotlin property */
abstract class KotlinGetterElement : KotlinAccessorElement()

/* Setter element of a Kotlin property */
abstract class KotlinSetterElement : KotlinAccessorElement() {

	/** The parameter of the setter element */
	abstract val parameter: KotlinSetterParameterElement
}

/** Parameter of a Kotlin setter */
abstract class KotlinSetterParameterElement : KotlinParameterElement() {

	/** A setter parameter is enclosed by its setter */
	abstract override val enclosingElement: KotlinSetterElement

	final override val hasDefaultValue: Boolean = false
	final override val isCrossInline: Boolean = false
	final override val isNoInline: Boolean = false
}

abstract class KotlinPackageElement : KotlinElement(), KotlinQualifiedNameable,
	EnclosesKotlinTypes, EnclosesKotlinPackages, EnclosesKotlinFunctions,
	EnclosesKotlinProperties, EnclosesKotlinTypeAliases, EnclosesJavaPackages,
	EnclosesJavaTypes, Has1To1JavaMapping {

	abstract override val javaElement: PackageElement

	/** Whether this package is unnamed */
	abstract val isUnnamed: Boolean

	override val enclosedJavaElements: Set<Element>
		get() = javaPackages + javaTypes

	@Suppress("UNCHECKED_CAST")
	override val enclosedKotlinElements: Set<KotlinElement>
		get() = (kotlinTypes + kotlinPackages + properties + typeAliases + functions) as Set<KotlinElement>
}

/** A module declaration that contains Kotlin packages */
abstract class KotlinModuleElement : KotlinElement(), EnclosesKotlinPackages,
	KotlinQualifiedNameable, EnclosesJavaPackages, Has1To1JavaMapping {

	abstract override val javaElement: ModuleElement

	/** Always `null` because a module is never enclosed by another element */
	override val enclosingElement: Nothing? = null

	/** Whether this module is open */
	abstract val isOpen: Boolean

	/** Whether this module is unnamed */
	abstract val isUnnamed: Boolean

	/** The directives declared by this module */
	abstract val directives: List<ModuleElement.Directive>

	/** The packages enclosed by this module */
	abstract override val enclosedKotlinElements: Set<KotlinPackageElement>
}

/** A Kotlin type alias declaration */
abstract class KotlinTypeAliasElement : KotlinElement(),
	HasKotlinVisibility, KotlinParameterizable {

	/**
	 * If the Kotlin type alias has annotations the Kotlin compiler will generate
	 * an empty parameterless void-returning synthetic method named
	 * "aliasName$annotations" to hold the annotations
	 */
	abstract val javaAnnotationHolderElement: ExecutableElement?

	//TODO("typealias underlyingType docs")
	abstract val underlyingType: TypeMirror

	//TODO("typealias expandedType docs")
	abstract val expandedType: TypeMirror
}
